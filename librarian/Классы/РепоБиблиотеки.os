#Использовать gitrunner
#Использовать logos
#Использовать opm
#Использовать fs

Перем ИмяРепозитория;
Перем ЭтоФорк;
Перем ПутьSSH;
Перем ПутьHTTP;
Перем URLДетальнойИнформации;
Перем КаталогРабочейКопии;
Перем Лог;

Процедура НастроитьПоОписанию(Знач ОписаниеРепо) Экспорт

	ИмяРепозитория = ОписаниеРепо.ИмяРепозитория;
	ЭтоФорк = ОписаниеРепо.ЭтоФорк;
	ПутьSSH = ОписаниеРепо.ПутьSSH;
	ПутьHTTP = ОписаниеРепо.ПутьHTTP;
	URLДетальнойИнформации = ОписаниеРепо.URLДетальнойИнформации;

КонецПроцедуры

Процедура УстановитьКаталогРабочейКопии(Знач Каталог) Экспорт
	КаталогРабочейКопии = Каталог;
КонецПроцедуры

Функция ПолучитьКаталогРабочейКопии() Экспорт
	Возврат КаталогРабочейКопии;
КонецФункции // ПолучитьКаталогРабочейКопии()

Функция ПолучитьИмяРепозитория() Экспорт
	Возврат ИмяРепозитория;
КонецФункции

Процедура ПолучитьАктуальныйКод(Знач ИмяВетки) Экспорт

	Лог.Информация(СтрШаблон("Клонирую ветку %1 в %2", ИмяВетки, КаталогРабочейКопии));
	
	ГитМенеджер = Новый ГитРепозиторий();
	ГитМенеджер.УстановитьРабочийКаталог(КаталогРабочейКопии);
	Если НЕ ФС.КаталогСуществует(ОбъединитьПути(КаталогРабочейКопии,".git")) Тогда
		ГитМенеджер.КлонироватьРепозиторий(ПутьHTTP, ".");
		Лог.Информация("Репозиторий успешно склонирован");
	КонецЕсли;

	Лог.Информация("Переход в ветку %1", ИмяВетки);
	ГитМенеджер.ПерейтиВВетку(ИмяВетки);
	ГитМенеджер.Получить();
	ГитМенеджер.ОбновитьПодмодули(Истина, Истина);

КонецПроцедуры

Процедура СинхронизироватьФорк() Экспорт
	
	Если ЭтоФорк Тогда
		Лог.Информация("Получаю информацию о родителе форка %1", ИмяРепозитория);
		
		Менеджер = Новый МенеджерБиблиотекиПакетов();
		Менеджер.УстановитьСоединение();
		ДанныеОтветаРепозиторий = Менеджер.ПолучитьДанныеРепозитория(ИмяРепозитория);
		Менеджер.ЗакрытьСоединение();
		ПутьКРепозиториюРодителю = ДанныеОтветаРепозиторий.Получить("parent").Получить("clone_url");
		
		ГитРепозиторий = Новый ГитРепозиторий();
		ГитРепозиторий.УстановитьРабочийКаталог(КаталогРабочейКопии);
		ВнешниеРепозитории = ГитРепозиторий.ПолучитьСписокВнешнихРепозиториев();
		ВнешнийРепозиторийУжеДобавлен = Ложь;
		Для Каждого ВнешнийРепозиторий Из ВнешниеРепозитории Цикл
			Лог.Отладка("Существующий remote: %1, Адрес родителя: %2", ВнешнийРепозиторий.Адрес, ПутьКРепозиториюРодителю);
			Если ВнешнийРепозиторий.Адрес = ПутьКРепозиториюРодителю Тогда
				ВнешнийРепозиторийУжеДобавлен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВнешнийРепозиторийУжеДобавлен Тогда
			ГитРепозиторий.ДобавитьВнешнийРепозиторий("upstream", ПутьКРепозиториюРодителю);
		КонецЕсли;
		ГитРепозиторий.Получить("upstream", "master");
		ГитРепозиторий.ОбновитьПодмодули(Истина, Истина);
		Лог.Информация("Информация о родителе получена");

	КонецЕсли;

КонецПроцедуры

Процедура ОпубликоватьОбновления() Экспорт
	ГитРепозиторий = Новый ГитРепозиторий();
	ГитРепозиторий.УстановитьРабочийКаталог(КаталогРабочейКопии);
	ГитРепозиторий.Отправить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Лог = Логирование.ПолучитьЛог("oscript.infrastructure");