//////////////////////////////////////////////////////////////////////////////
//
// Объектная модель библиотеки (организации) oscript-library на github
//
//////////////////////////////////////////////////////////////////////////////

#Использовать json
#Использовать logos

Перем мТокенАвторизации;
Перем Лог;
Перем мСоединение;

Процедура УстановитьСоединение() Экспорт
	
	Сервер = "https://api.github.com";
	мСоединение = Новый HTTPСоединение(Сервер);

КонецПроцедуры

Процедура ЗакрытьСоединение() Экспорт
	
	Если мСоединение <> Неопределено Тогда
		ОсвободитьОбъект(мСоединение);
	КонецЕсли;

КонецПроцедуры

Функция ЗапроситьРесурс(Знач Ресурс) Экспорт
	
	Лог.Отладка("Запрашиваю ресурс: " + Ресурс);

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd.github.v3+json");
	Заголовки.Вставить("User-Agent", "oscript-library-autobuilder");

	ТокенАвторизации = ПолучитьТокенАвторизации();
	Если ЗначениеЗаполнено(ТокенАвторизации) Тогда
		Заголовки.Вставить("Authorization", СтрШаблон("token %1", ТокенАвторизации));
	КонецЕсли;

	Запрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Ответ  = мСоединение.Получить(Запрос);

	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		Лог.Отладка(ТелоОтвета);
		ВызватьИсключение Ответ.КодСостояния;
	КонецЕсли;

	Возврат ТелоОтвета;

КонецФункции

// Возвращает активный токен авторизации
//
Функция ПолучитьТокенАвторизации()

	Если мТокенАвторизации = Неопределено Тогда
		// еще не задали
		СИ = Новый СистемнаяИнформация;
		мТокенАвторизации = СИ.ПолучитьПеременнуюСреды("GITHUB_OAUTH_TOKEN");
		Если мТокенАвторизации = Неопределено Тогда
			Лог.Отладка("Токен авторизации GITHUB не установлен");
		КонецЕсли;
	КонецЕсли;

	Возврат мТокенАвторизации;

КонецФункции // ПолучитьТокенАвторизации()

// Устанавливает токен авторизации в GH
//
Процедура УстановитьТокенАвторизации(Знач Токен) Экспорт
	мТокенАвторизации = Токен;
КонецПроцедуры

// Выдает список всех репо в организации
//
// Возвращаемое значение:
//   Таблица значений: Имя, РепоБиблиотеки
//
Функция ПолучитьСписокРепозиториев() Экспорт
	
	Ответ = ЗапроситьРесурс("/orgs/oscript-library/repos");
	ПарсерJSON = Новый ПарсерJSON();
	ДанныеОтвета = ПарсерJSON.ПрочитатьJSON(Ответ);

	ТаблицаИнфо = Новый ТаблицаЗначений;
	ТаблицаИнфо.Колонки.Добавить("Имя");
	ТаблицаИнфо.Колонки.Добавить("РепоБиблиотеки");

	Для Каждого Репозиторий Из ДанныеОтвета Цикл

		Описание = ПрочитатьОписаниеРепо(Репозиторий);
		Лог.Отладка("Прочитан репо: " + Описание.ИмяРепозитория);
		СтрокаРепо = ТаблицаИнфо.Добавить();
		СтрокаРепо.Имя = Описание.ИмяРепозитория;
		СтрокаРепо.РепоБиблиотеки = Описание;

	КонецЦикла;

	Возврат ТаблицаИнфо;

КонецФункции // ПолучитьСписокРепозиториев()

Функция ПрочитатьОписаниеРепо(Знач ДанныеJSON)
	
	Репо = Новый Структура;
	Репо.Вставить("ИмяРепозитория", ДанныеJSON.Получить("name"));
	Репо.Вставить("ЭтоФорк", ДанныеJSON.Получить("fork"));
	Репо.Вставить("ПутьSSH", ДанныеJSON.Получить("ssh_url"));
	Репо.Вставить("ПутьGIT", ДанныеJSON.Получить("git_url"));
	Репо.Вставить("ПутьHTTP", ДанныеJSON.Получить("clone_url"));
	Репо.Вставить("URLДетальнойИнформации", ДанныеJSON.Получить("url"));

	Возврат Репо;

КонецФункции

//////////////////////////////////////////////////////////////////////
//

Лог = Логирование.ПолучитьЛог("oscript.infrastructure");
